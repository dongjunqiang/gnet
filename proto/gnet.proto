package gnet.proto;

enum ERR_CODE
{
    SUCCESS = 0;
    BUSY = 1;
    ERROR = -1;

    ERR_ADDRESS_INVALID = -101;
    ERR_ADDRESS_NOT_SUPPORT = -102;

    ERR_CFG_NOT_EXIST = -201;
    ERR_CFG_PARSE = -202;

    ERR_GATE_NOT_FOUND = -301;
    ERR_GATE_CANT_CONNECT = -302;
    ERR_GATE_CANT_START_LINK = -303;
    ERR_GATE_LINK_NOT_FOUND = -304;
    ERR_GATE_PKG_TOO_BIG = -305;
    ERR_GATE_SEND_FAIL = -306;
    ERR_GATE_START_FAIL = -307;
    ERR_GATE_LINK_EXIST = -308;
    ERR_GATE_STARTED = -309;
}

// tcp地址封装
message TCP
{
    required string host = 1;
    required int32 port = 2;
}

// shm地址封装, 只有同物理机器的节点之间才会自动分配shm
// 约定, a->b的shm, 由物理机器上的GW分配和回收
message SHM
{
    required string src = 1;
    required string dst = 2;
    required int32 shmid = 3;
    required uint32 size = 4;
}

// 服务节点
message NODE
{
    required string name = 1;
    required TCP tcp = 2;
    repeated NODE children = 3;
    repeated SHM shms = 4;
}

// 路由表
message ROUTE
{
    required NODE root = 1;
}

//////////////////////////////////////////

enum PKGCmd {
    CMD_DATA = 1;
    CMD_SYN = 2;
    CMD_ACK = 3;
    CMD_ROUTE = 4;
}

message PKGHead {
    required PKGCmd cmd = 1;
    optional uint32 timestamp = 2;
    optional uint32 sequence = 3;
}

message PKGSyn
{
    required string name = 1;
}
message PKGAck
{
    // if null, mean you should play as a GW
    optional TCP gw_addr = 1;
}

message PKG
{
    required PKGHead head = 1;

    optional PKGSyn syn = 2;
    optional PKGAck ack = 3;
}

