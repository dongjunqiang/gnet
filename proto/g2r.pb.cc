// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: g2r.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "g2r.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace GNET {

namespace {

const ::google::protobuf::Descriptor* MG2R_REG_REQ_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MG2R_REG_REQ_reflection_ = NULL;
const ::google::protobuf::Descriptor* MR2G_REG_RES_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MR2G_REG_RES_reflection_ = NULL;
const ::google::protobuf::Descriptor* MG2R_SYNC_REQ_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MG2R_SYNC_REQ_reflection_ = NULL;
const ::google::protobuf::Descriptor* MR2G_SYNC_RES_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MR2G_SYNC_RES_reflection_ = NULL;
const ::google::protobuf::Descriptor* MR2G_SYNC_REQ_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MR2G_SYNC_REQ_reflection_ = NULL;
const ::google::protobuf::Descriptor* MG2R_SYNC_RES_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MG2R_SYNC_RES_reflection_ = NULL;
const ::google::protobuf::Descriptor* MG2R_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MG2R_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* EN_CMD_G2R_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_g2r_2eproto() {
  protobuf_AddDesc_g2r_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "g2r.proto");
  GOOGLE_CHECK(file != NULL);
  MG2R_REG_REQ_descriptor_ = file->message_type(0);
  static const int MG2R_REG_REQ_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MG2R_REG_REQ, id_),
  };
  MG2R_REG_REQ_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MG2R_REG_REQ_descriptor_,
      MG2R_REG_REQ::default_instance_,
      MG2R_REG_REQ_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MG2R_REG_REQ, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MG2R_REG_REQ, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MG2R_REG_REQ));
  MR2G_REG_RES_descriptor_ = file->message_type(1);
  static const int MR2G_REG_RES_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MR2G_REG_RES, result_),
  };
  MR2G_REG_RES_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MR2G_REG_RES_descriptor_,
      MR2G_REG_RES::default_instance_,
      MR2G_REG_RES_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MR2G_REG_RES, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MR2G_REG_RES, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MR2G_REG_RES));
  MG2R_SYNC_REQ_descriptor_ = file->message_type(2);
  static const int MG2R_SYNC_REQ_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MG2R_SYNC_REQ, seq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MG2R_SYNC_REQ, sync_),
  };
  MG2R_SYNC_REQ_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MG2R_SYNC_REQ_descriptor_,
      MG2R_SYNC_REQ::default_instance_,
      MG2R_SYNC_REQ_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MG2R_SYNC_REQ, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MG2R_SYNC_REQ, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MG2R_SYNC_REQ));
  MR2G_SYNC_RES_descriptor_ = file->message_type(3);
  static const int MR2G_SYNC_RES_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MR2G_SYNC_RES, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MR2G_SYNC_RES, seq_),
  };
  MR2G_SYNC_RES_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MR2G_SYNC_RES_descriptor_,
      MR2G_SYNC_RES::default_instance_,
      MR2G_SYNC_RES_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MR2G_SYNC_RES, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MR2G_SYNC_RES, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MR2G_SYNC_RES));
  MR2G_SYNC_REQ_descriptor_ = file->message_type(4);
  static const int MR2G_SYNC_REQ_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MR2G_SYNC_REQ, seq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MR2G_SYNC_REQ, sync_),
  };
  MR2G_SYNC_REQ_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MR2G_SYNC_REQ_descriptor_,
      MR2G_SYNC_REQ::default_instance_,
      MR2G_SYNC_REQ_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MR2G_SYNC_REQ, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MR2G_SYNC_REQ, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MR2G_SYNC_REQ));
  MG2R_SYNC_RES_descriptor_ = file->message_type(5);
  static const int MG2R_SYNC_RES_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MG2R_SYNC_RES, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MG2R_SYNC_RES, seq_),
  };
  MG2R_SYNC_RES_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MG2R_SYNC_RES_descriptor_,
      MG2R_SYNC_RES::default_instance_,
      MG2R_SYNC_RES_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MG2R_SYNC_RES, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MG2R_SYNC_RES, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MG2R_SYNC_RES));
  MG2R_descriptor_ = file->message_type(6);
  static const int MG2R_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MG2R, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MG2R, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MG2R, mg2r_reg_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MG2R, mr2g_reg_res_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MG2R, mg2r_sync_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MG2R, mr2g_sync_res_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MG2R, mr2g_sync_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MG2R, mg2r_sync_res_),
  };
  MG2R_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MG2R_descriptor_,
      MG2R::default_instance_,
      MG2R_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MG2R, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MG2R, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MG2R));
  EN_CMD_G2R_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_g2r_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MG2R_REG_REQ_descriptor_, &MG2R_REG_REQ::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MR2G_REG_RES_descriptor_, &MR2G_REG_RES::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MG2R_SYNC_REQ_descriptor_, &MG2R_SYNC_REQ::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MR2G_SYNC_RES_descriptor_, &MR2G_SYNC_RES::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MR2G_SYNC_REQ_descriptor_, &MR2G_SYNC_REQ::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MG2R_SYNC_RES_descriptor_, &MG2R_SYNC_RES::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MG2R_descriptor_, &MG2R::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_g2r_2eproto() {
  delete MG2R_REG_REQ::default_instance_;
  delete MG2R_REG_REQ_reflection_;
  delete MR2G_REG_RES::default_instance_;
  delete MR2G_REG_RES_reflection_;
  delete MG2R_SYNC_REQ::default_instance_;
  delete MG2R_SYNC_REQ_reflection_;
  delete MR2G_SYNC_RES::default_instance_;
  delete MR2G_SYNC_RES_reflection_;
  delete MR2G_SYNC_REQ::default_instance_;
  delete MR2G_SYNC_REQ_reflection_;
  delete MG2R_SYNC_RES::default_instance_;
  delete MG2R_SYNC_RES_reflection_;
  delete MG2R::default_instance_;
  delete MG2R_reflection_;
}

void protobuf_AddDesc_g2r_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::GNET::protobuf_AddDesc_comm_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\tg2r.proto\022\004GNET\032\ncomm.proto\"\032\n\014MG2R_RE"
    "G_REQ\022\n\n\002id\030\001 \002(\003\"\036\n\014MR2G_REG_RES\022\016\n\006res"
    "ult\030\001 \002(\005\"7\n\rMG2R_SYNC_REQ\022\013\n\003seq\030\001 \002(\005\022"
    "\031\n\004sync\030\002 \003(\0132\013.GNET.MSync\",\n\rMR2G_SYNC_"
    "RES\022\016\n\006result\030\001 \002(\005\022\013\n\003seq\030\002 \002(\005\"7\n\rMR2G"
    "_SYNC_REQ\022\013\n\003seq\030\001 \002(\005\022\031\n\004sync\030\002 \003(\0132\013.G"
    "NET.MSync\",\n\rMG2R_SYNC_RES\022\016\n\006result\030\001 \002"
    "(\005\022\013\n\003seq\030\002 \002(\005\"\274\002\n\004MG2R\022\035\n\003cmd\030\001 \002(\0162\020."
    "GNET.EN_CMD_G2R\022\021\n\ttimestamp\030\002 \001(\005\022(\n\014mg"
    "2r_reg_req\030e \001(\0132\022.GNET.MG2R_REG_REQ\022(\n\014"
    "mr2g_reg_res\030f \001(\0132\022.GNET.MR2G_REG_RES\022*"
    "\n\rmg2r_sync_req\030g \001(\0132\023.GNET.MG2R_SYNC_R"
    "EQ\022*\n\rmr2g_sync_res\030h \001(\0132\023.GNET.MR2G_SY"
    "NC_RES\022*\n\rmr2g_sync_req\030i \001(\0132\023.GNET.MR2"
    "G_SYNC_REQ\022*\n\rmg2r_sync_res\030j \001(\0132\023.GNET"
    ".MG2R_SYNC_RES*\262\001\n\nEN_CMD_G2R\022\023\n\017CMD_G2R"
    "_REG_REQ\020\001\022\023\n\017CMD_R2G_REG_RES\020\002\022\024\n\020CMD_G"
    "2R_SYNC_REQ\020\003\022\024\n\020CMD_R2G_SYNC_RES\020\004\022\024\n\020C"
    "MD_R2G_SYNC_REQ\020\005\022\024\n\020CMD_G2R_SYNC_RES\020\006\022"
    "\020\n\014CMD_G2R_PING\020\007\022\020\n\014CMD_R2G_PONG\020\010", 795);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "g2r.proto", &protobuf_RegisterTypes);
  MG2R_REG_REQ::default_instance_ = new MG2R_REG_REQ();
  MR2G_REG_RES::default_instance_ = new MR2G_REG_RES();
  MG2R_SYNC_REQ::default_instance_ = new MG2R_SYNC_REQ();
  MR2G_SYNC_RES::default_instance_ = new MR2G_SYNC_RES();
  MR2G_SYNC_REQ::default_instance_ = new MR2G_SYNC_REQ();
  MG2R_SYNC_RES::default_instance_ = new MG2R_SYNC_RES();
  MG2R::default_instance_ = new MG2R();
  MG2R_REG_REQ::default_instance_->InitAsDefaultInstance();
  MR2G_REG_RES::default_instance_->InitAsDefaultInstance();
  MG2R_SYNC_REQ::default_instance_->InitAsDefaultInstance();
  MR2G_SYNC_RES::default_instance_->InitAsDefaultInstance();
  MR2G_SYNC_REQ::default_instance_->InitAsDefaultInstance();
  MG2R_SYNC_RES::default_instance_->InitAsDefaultInstance();
  MG2R::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_g2r_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_g2r_2eproto {
  StaticDescriptorInitializer_g2r_2eproto() {
    protobuf_AddDesc_g2r_2eproto();
  }
} static_descriptor_initializer_g2r_2eproto_;
const ::google::protobuf::EnumDescriptor* EN_CMD_G2R_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EN_CMD_G2R_descriptor_;
}
bool EN_CMD_G2R_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int MG2R_REG_REQ::kIdFieldNumber;
#endif  // !_MSC_VER

MG2R_REG_REQ::MG2R_REG_REQ()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MG2R_REG_REQ::InitAsDefaultInstance() {
}

MG2R_REG_REQ::MG2R_REG_REQ(const MG2R_REG_REQ& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MG2R_REG_REQ::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MG2R_REG_REQ::~MG2R_REG_REQ() {
  SharedDtor();
}

void MG2R_REG_REQ::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MG2R_REG_REQ::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MG2R_REG_REQ::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MG2R_REG_REQ_descriptor_;
}

const MG2R_REG_REQ& MG2R_REG_REQ::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_g2r_2eproto();
  return *default_instance_;
}

MG2R_REG_REQ* MG2R_REG_REQ::default_instance_ = NULL;

MG2R_REG_REQ* MG2R_REG_REQ::New() const {
  return new MG2R_REG_REQ;
}

void MG2R_REG_REQ::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MG2R_REG_REQ::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MG2R_REG_REQ::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MG2R_REG_REQ::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MG2R_REG_REQ::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MG2R_REG_REQ::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MG2R_REG_REQ* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MG2R_REG_REQ*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MG2R_REG_REQ::MergeFrom(const MG2R_REG_REQ& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MG2R_REG_REQ::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MG2R_REG_REQ::CopyFrom(const MG2R_REG_REQ& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MG2R_REG_REQ::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MG2R_REG_REQ::Swap(MG2R_REG_REQ* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MG2R_REG_REQ::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MG2R_REG_REQ_descriptor_;
  metadata.reflection = MG2R_REG_REQ_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MR2G_REG_RES::kResultFieldNumber;
#endif  // !_MSC_VER

MR2G_REG_RES::MR2G_REG_RES()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MR2G_REG_RES::InitAsDefaultInstance() {
}

MR2G_REG_RES::MR2G_REG_RES(const MR2G_REG_RES& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MR2G_REG_RES::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MR2G_REG_RES::~MR2G_REG_RES() {
  SharedDtor();
}

void MR2G_REG_RES::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MR2G_REG_RES::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MR2G_REG_RES::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MR2G_REG_RES_descriptor_;
}

const MR2G_REG_RES& MR2G_REG_RES::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_g2r_2eproto();
  return *default_instance_;
}

MR2G_REG_RES* MR2G_REG_RES::default_instance_ = NULL;

MR2G_REG_RES* MR2G_REG_RES::New() const {
  return new MR2G_REG_RES;
}

void MR2G_REG_RES::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MR2G_REG_RES::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MR2G_REG_RES::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MR2G_REG_RES::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MR2G_REG_RES::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MR2G_REG_RES::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MR2G_REG_RES* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MR2G_REG_RES*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MR2G_REG_RES::MergeFrom(const MR2G_REG_RES& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MR2G_REG_RES::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MR2G_REG_RES::CopyFrom(const MR2G_REG_RES& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MR2G_REG_RES::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MR2G_REG_RES::Swap(MR2G_REG_RES* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MR2G_REG_RES::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MR2G_REG_RES_descriptor_;
  metadata.reflection = MR2G_REG_RES_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MG2R_SYNC_REQ::kSeqFieldNumber;
const int MG2R_SYNC_REQ::kSyncFieldNumber;
#endif  // !_MSC_VER

MG2R_SYNC_REQ::MG2R_SYNC_REQ()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MG2R_SYNC_REQ::InitAsDefaultInstance() {
}

MG2R_SYNC_REQ::MG2R_SYNC_REQ(const MG2R_SYNC_REQ& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MG2R_SYNC_REQ::SharedCtor() {
  _cached_size_ = 0;
  seq_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MG2R_SYNC_REQ::~MG2R_SYNC_REQ() {
  SharedDtor();
}

void MG2R_SYNC_REQ::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MG2R_SYNC_REQ::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MG2R_SYNC_REQ::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MG2R_SYNC_REQ_descriptor_;
}

const MG2R_SYNC_REQ& MG2R_SYNC_REQ::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_g2r_2eproto();
  return *default_instance_;
}

MG2R_SYNC_REQ* MG2R_SYNC_REQ::default_instance_ = NULL;

MG2R_SYNC_REQ* MG2R_SYNC_REQ::New() const {
  return new MG2R_SYNC_REQ;
}

void MG2R_SYNC_REQ::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seq_ = 0;
  }
  sync_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MG2R_SYNC_REQ::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 seq = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seq_)));
          set_has_seq();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_sync;
        break;
      }

      // repeated .GNET.MSync sync = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sync:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sync()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_sync;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MG2R_SYNC_REQ::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 seq = 1;
  if (has_seq()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seq(), output);
  }

  // repeated .GNET.MSync sync = 2;
  for (int i = 0; i < this->sync_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->sync(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MG2R_SYNC_REQ::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 seq = 1;
  if (has_seq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seq(), target);
  }

  // repeated .GNET.MSync sync = 2;
  for (int i = 0; i < this->sync_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->sync(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MG2R_SYNC_REQ::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 seq = 1;
    if (has_seq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seq());
    }

  }
  // repeated .GNET.MSync sync = 2;
  total_size += 1 * this->sync_size();
  for (int i = 0; i < this->sync_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sync(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MG2R_SYNC_REQ::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MG2R_SYNC_REQ* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MG2R_SYNC_REQ*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MG2R_SYNC_REQ::MergeFrom(const MG2R_SYNC_REQ& from) {
  GOOGLE_CHECK_NE(&from, this);
  sync_.MergeFrom(from.sync_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seq()) {
      set_seq(from.seq());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MG2R_SYNC_REQ::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MG2R_SYNC_REQ::CopyFrom(const MG2R_SYNC_REQ& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MG2R_SYNC_REQ::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < sync_size(); i++) {
    if (!this->sync(i).IsInitialized()) return false;
  }
  return true;
}

void MG2R_SYNC_REQ::Swap(MG2R_SYNC_REQ* other) {
  if (other != this) {
    std::swap(seq_, other->seq_);
    sync_.Swap(&other->sync_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MG2R_SYNC_REQ::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MG2R_SYNC_REQ_descriptor_;
  metadata.reflection = MG2R_SYNC_REQ_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MR2G_SYNC_RES::kResultFieldNumber;
const int MR2G_SYNC_RES::kSeqFieldNumber;
#endif  // !_MSC_VER

MR2G_SYNC_RES::MR2G_SYNC_RES()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MR2G_SYNC_RES::InitAsDefaultInstance() {
}

MR2G_SYNC_RES::MR2G_SYNC_RES(const MR2G_SYNC_RES& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MR2G_SYNC_RES::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  seq_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MR2G_SYNC_RES::~MR2G_SYNC_RES() {
  SharedDtor();
}

void MR2G_SYNC_RES::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MR2G_SYNC_RES::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MR2G_SYNC_RES::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MR2G_SYNC_RES_descriptor_;
}

const MR2G_SYNC_RES& MR2G_SYNC_RES::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_g2r_2eproto();
  return *default_instance_;
}

MR2G_SYNC_RES* MR2G_SYNC_RES::default_instance_ = NULL;

MR2G_SYNC_RES* MR2G_SYNC_RES::New() const {
  return new MR2G_SYNC_RES;
}

void MR2G_SYNC_RES::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    seq_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MR2G_SYNC_RES::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_seq;
        break;
      }

      // required int32 seq = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seq_)));
          set_has_seq();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MR2G_SYNC_RES::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // required int32 seq = 2;
  if (has_seq()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seq(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MR2G_SYNC_RES::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // required int32 seq = 2;
  if (has_seq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seq(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MR2G_SYNC_RES::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // required int32 seq = 2;
    if (has_seq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seq());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MR2G_SYNC_RES::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MR2G_SYNC_RES* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MR2G_SYNC_RES*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MR2G_SYNC_RES::MergeFrom(const MR2G_SYNC_RES& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_seq()) {
      set_seq(from.seq());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MR2G_SYNC_RES::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MR2G_SYNC_RES::CopyFrom(const MR2G_SYNC_RES& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MR2G_SYNC_RES::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void MR2G_SYNC_RES::Swap(MR2G_SYNC_RES* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(seq_, other->seq_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MR2G_SYNC_RES::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MR2G_SYNC_RES_descriptor_;
  metadata.reflection = MR2G_SYNC_RES_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MR2G_SYNC_REQ::kSeqFieldNumber;
const int MR2G_SYNC_REQ::kSyncFieldNumber;
#endif  // !_MSC_VER

MR2G_SYNC_REQ::MR2G_SYNC_REQ()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MR2G_SYNC_REQ::InitAsDefaultInstance() {
}

MR2G_SYNC_REQ::MR2G_SYNC_REQ(const MR2G_SYNC_REQ& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MR2G_SYNC_REQ::SharedCtor() {
  _cached_size_ = 0;
  seq_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MR2G_SYNC_REQ::~MR2G_SYNC_REQ() {
  SharedDtor();
}

void MR2G_SYNC_REQ::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MR2G_SYNC_REQ::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MR2G_SYNC_REQ::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MR2G_SYNC_REQ_descriptor_;
}

const MR2G_SYNC_REQ& MR2G_SYNC_REQ::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_g2r_2eproto();
  return *default_instance_;
}

MR2G_SYNC_REQ* MR2G_SYNC_REQ::default_instance_ = NULL;

MR2G_SYNC_REQ* MR2G_SYNC_REQ::New() const {
  return new MR2G_SYNC_REQ;
}

void MR2G_SYNC_REQ::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seq_ = 0;
  }
  sync_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MR2G_SYNC_REQ::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 seq = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seq_)));
          set_has_seq();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_sync;
        break;
      }

      // repeated .GNET.MSync sync = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sync:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sync()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_sync;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MR2G_SYNC_REQ::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 seq = 1;
  if (has_seq()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seq(), output);
  }

  // repeated .GNET.MSync sync = 2;
  for (int i = 0; i < this->sync_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->sync(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MR2G_SYNC_REQ::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 seq = 1;
  if (has_seq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seq(), target);
  }

  // repeated .GNET.MSync sync = 2;
  for (int i = 0; i < this->sync_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->sync(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MR2G_SYNC_REQ::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 seq = 1;
    if (has_seq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seq());
    }

  }
  // repeated .GNET.MSync sync = 2;
  total_size += 1 * this->sync_size();
  for (int i = 0; i < this->sync_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sync(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MR2G_SYNC_REQ::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MR2G_SYNC_REQ* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MR2G_SYNC_REQ*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MR2G_SYNC_REQ::MergeFrom(const MR2G_SYNC_REQ& from) {
  GOOGLE_CHECK_NE(&from, this);
  sync_.MergeFrom(from.sync_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seq()) {
      set_seq(from.seq());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MR2G_SYNC_REQ::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MR2G_SYNC_REQ::CopyFrom(const MR2G_SYNC_REQ& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MR2G_SYNC_REQ::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < sync_size(); i++) {
    if (!this->sync(i).IsInitialized()) return false;
  }
  return true;
}

void MR2G_SYNC_REQ::Swap(MR2G_SYNC_REQ* other) {
  if (other != this) {
    std::swap(seq_, other->seq_);
    sync_.Swap(&other->sync_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MR2G_SYNC_REQ::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MR2G_SYNC_REQ_descriptor_;
  metadata.reflection = MR2G_SYNC_REQ_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MG2R_SYNC_RES::kResultFieldNumber;
const int MG2R_SYNC_RES::kSeqFieldNumber;
#endif  // !_MSC_VER

MG2R_SYNC_RES::MG2R_SYNC_RES()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MG2R_SYNC_RES::InitAsDefaultInstance() {
}

MG2R_SYNC_RES::MG2R_SYNC_RES(const MG2R_SYNC_RES& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MG2R_SYNC_RES::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  seq_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MG2R_SYNC_RES::~MG2R_SYNC_RES() {
  SharedDtor();
}

void MG2R_SYNC_RES::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MG2R_SYNC_RES::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MG2R_SYNC_RES::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MG2R_SYNC_RES_descriptor_;
}

const MG2R_SYNC_RES& MG2R_SYNC_RES::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_g2r_2eproto();
  return *default_instance_;
}

MG2R_SYNC_RES* MG2R_SYNC_RES::default_instance_ = NULL;

MG2R_SYNC_RES* MG2R_SYNC_RES::New() const {
  return new MG2R_SYNC_RES;
}

void MG2R_SYNC_RES::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    seq_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MG2R_SYNC_RES::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_seq;
        break;
      }

      // required int32 seq = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seq_)));
          set_has_seq();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MG2R_SYNC_RES::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // required int32 seq = 2;
  if (has_seq()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seq(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MG2R_SYNC_RES::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // required int32 seq = 2;
  if (has_seq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seq(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MG2R_SYNC_RES::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // required int32 seq = 2;
    if (has_seq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seq());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MG2R_SYNC_RES::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MG2R_SYNC_RES* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MG2R_SYNC_RES*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MG2R_SYNC_RES::MergeFrom(const MG2R_SYNC_RES& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_seq()) {
      set_seq(from.seq());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MG2R_SYNC_RES::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MG2R_SYNC_RES::CopyFrom(const MG2R_SYNC_RES& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MG2R_SYNC_RES::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void MG2R_SYNC_RES::Swap(MG2R_SYNC_RES* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(seq_, other->seq_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MG2R_SYNC_RES::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MG2R_SYNC_RES_descriptor_;
  metadata.reflection = MG2R_SYNC_RES_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MG2R::kCmdFieldNumber;
const int MG2R::kTimestampFieldNumber;
const int MG2R::kMg2RRegReqFieldNumber;
const int MG2R::kMr2GRegResFieldNumber;
const int MG2R::kMg2RSyncReqFieldNumber;
const int MG2R::kMr2GSyncResFieldNumber;
const int MG2R::kMr2GSyncReqFieldNumber;
const int MG2R::kMg2RSyncResFieldNumber;
#endif  // !_MSC_VER

MG2R::MG2R()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MG2R::InitAsDefaultInstance() {
  mg2r_reg_req_ = const_cast< ::GNET::MG2R_REG_REQ*>(&::GNET::MG2R_REG_REQ::default_instance());
  mr2g_reg_res_ = const_cast< ::GNET::MR2G_REG_RES*>(&::GNET::MR2G_REG_RES::default_instance());
  mg2r_sync_req_ = const_cast< ::GNET::MG2R_SYNC_REQ*>(&::GNET::MG2R_SYNC_REQ::default_instance());
  mr2g_sync_res_ = const_cast< ::GNET::MR2G_SYNC_RES*>(&::GNET::MR2G_SYNC_RES::default_instance());
  mr2g_sync_req_ = const_cast< ::GNET::MR2G_SYNC_REQ*>(&::GNET::MR2G_SYNC_REQ::default_instance());
  mg2r_sync_res_ = const_cast< ::GNET::MG2R_SYNC_RES*>(&::GNET::MG2R_SYNC_RES::default_instance());
}

MG2R::MG2R(const MG2R& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MG2R::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 1;
  timestamp_ = 0;
  mg2r_reg_req_ = NULL;
  mr2g_reg_res_ = NULL;
  mg2r_sync_req_ = NULL;
  mr2g_sync_res_ = NULL;
  mr2g_sync_req_ = NULL;
  mg2r_sync_res_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MG2R::~MG2R() {
  SharedDtor();
}

void MG2R::SharedDtor() {
  if (this != default_instance_) {
    delete mg2r_reg_req_;
    delete mr2g_reg_res_;
    delete mg2r_sync_req_;
    delete mr2g_sync_res_;
    delete mr2g_sync_req_;
    delete mg2r_sync_res_;
  }
}

void MG2R::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MG2R::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MG2R_descriptor_;
}

const MG2R& MG2R::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_g2r_2eproto();
  return *default_instance_;
}

MG2R* MG2R::default_instance_ = NULL;

MG2R* MG2R::New() const {
  return new MG2R;
}

void MG2R::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cmd_ = 1;
    timestamp_ = 0;
    if (has_mg2r_reg_req()) {
      if (mg2r_reg_req_ != NULL) mg2r_reg_req_->::GNET::MG2R_REG_REQ::Clear();
    }
    if (has_mr2g_reg_res()) {
      if (mr2g_reg_res_ != NULL) mr2g_reg_res_->::GNET::MR2G_REG_RES::Clear();
    }
    if (has_mg2r_sync_req()) {
      if (mg2r_sync_req_ != NULL) mg2r_sync_req_->::GNET::MG2R_SYNC_REQ::Clear();
    }
    if (has_mr2g_sync_res()) {
      if (mr2g_sync_res_ != NULL) mr2g_sync_res_->::GNET::MR2G_SYNC_RES::Clear();
    }
    if (has_mr2g_sync_req()) {
      if (mr2g_sync_req_ != NULL) mr2g_sync_req_->::GNET::MR2G_SYNC_REQ::Clear();
    }
    if (has_mg2r_sync_res()) {
      if (mg2r_sync_res_ != NULL) mg2r_sync_res_->::GNET::MG2R_SYNC_RES::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MG2R::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .GNET.EN_CMD_G2R cmd = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GNET::EN_CMD_G2R_IsValid(value)) {
            set_cmd(static_cast< ::GNET::EN_CMD_G2R >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_timestamp;
        break;
      }

      // optional int32 timestamp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(810)) goto parse_mg2r_reg_req;
        break;
      }

      // optional .GNET.MG2R_REG_REQ mg2r_reg_req = 101;
      case 101: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mg2r_reg_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mg2r_reg_req()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(818)) goto parse_mr2g_reg_res;
        break;
      }

      // optional .GNET.MR2G_REG_RES mr2g_reg_res = 102;
      case 102: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mr2g_reg_res:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mr2g_reg_res()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(826)) goto parse_mg2r_sync_req;
        break;
      }

      // optional .GNET.MG2R_SYNC_REQ mg2r_sync_req = 103;
      case 103: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mg2r_sync_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mg2r_sync_req()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(834)) goto parse_mr2g_sync_res;
        break;
      }

      // optional .GNET.MR2G_SYNC_RES mr2g_sync_res = 104;
      case 104: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mr2g_sync_res:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mr2g_sync_res()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(842)) goto parse_mr2g_sync_req;
        break;
      }

      // optional .GNET.MR2G_SYNC_REQ mr2g_sync_req = 105;
      case 105: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mr2g_sync_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mr2g_sync_req()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(850)) goto parse_mg2r_sync_res;
        break;
      }

      // optional .GNET.MG2R_SYNC_RES mg2r_sync_res = 106;
      case 106: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mg2r_sync_res:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mg2r_sync_res()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MG2R::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .GNET.EN_CMD_G2R cmd = 1;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional int32 timestamp = 2;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->timestamp(), output);
  }

  // optional .GNET.MG2R_REG_REQ mg2r_reg_req = 101;
  if (has_mg2r_reg_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      101, this->mg2r_reg_req(), output);
  }

  // optional .GNET.MR2G_REG_RES mr2g_reg_res = 102;
  if (has_mr2g_reg_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      102, this->mr2g_reg_res(), output);
  }

  // optional .GNET.MG2R_SYNC_REQ mg2r_sync_req = 103;
  if (has_mg2r_sync_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      103, this->mg2r_sync_req(), output);
  }

  // optional .GNET.MR2G_SYNC_RES mr2g_sync_res = 104;
  if (has_mr2g_sync_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      104, this->mr2g_sync_res(), output);
  }

  // optional .GNET.MR2G_SYNC_REQ mr2g_sync_req = 105;
  if (has_mr2g_sync_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      105, this->mr2g_sync_req(), output);
  }

  // optional .GNET.MG2R_SYNC_RES mg2r_sync_res = 106;
  if (has_mg2r_sync_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      106, this->mg2r_sync_res(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MG2R::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .GNET.EN_CMD_G2R cmd = 1;
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional int32 timestamp = 2;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->timestamp(), target);
  }

  // optional .GNET.MG2R_REG_REQ mg2r_reg_req = 101;
  if (has_mg2r_reg_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        101, this->mg2r_reg_req(), target);
  }

  // optional .GNET.MR2G_REG_RES mr2g_reg_res = 102;
  if (has_mr2g_reg_res()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        102, this->mr2g_reg_res(), target);
  }

  // optional .GNET.MG2R_SYNC_REQ mg2r_sync_req = 103;
  if (has_mg2r_sync_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        103, this->mg2r_sync_req(), target);
  }

  // optional .GNET.MR2G_SYNC_RES mr2g_sync_res = 104;
  if (has_mr2g_sync_res()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        104, this->mr2g_sync_res(), target);
  }

  // optional .GNET.MR2G_SYNC_REQ mr2g_sync_req = 105;
  if (has_mr2g_sync_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        105, this->mr2g_sync_req(), target);
  }

  // optional .GNET.MG2R_SYNC_RES mg2r_sync_res = 106;
  if (has_mg2r_sync_res()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        106, this->mg2r_sync_res(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MG2R::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .GNET.EN_CMD_G2R cmd = 1;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional int32 timestamp = 2;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timestamp());
    }

    // optional .GNET.MG2R_REG_REQ mg2r_reg_req = 101;
    if (has_mg2r_reg_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mg2r_reg_req());
    }

    // optional .GNET.MR2G_REG_RES mr2g_reg_res = 102;
    if (has_mr2g_reg_res()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mr2g_reg_res());
    }

    // optional .GNET.MG2R_SYNC_REQ mg2r_sync_req = 103;
    if (has_mg2r_sync_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mg2r_sync_req());
    }

    // optional .GNET.MR2G_SYNC_RES mr2g_sync_res = 104;
    if (has_mr2g_sync_res()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mr2g_sync_res());
    }

    // optional .GNET.MR2G_SYNC_REQ mr2g_sync_req = 105;
    if (has_mr2g_sync_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mr2g_sync_req());
    }

    // optional .GNET.MG2R_SYNC_RES mg2r_sync_res = 106;
    if (has_mg2r_sync_res()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mg2r_sync_res());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MG2R::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MG2R* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MG2R*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MG2R::MergeFrom(const MG2R& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_mg2r_reg_req()) {
      mutable_mg2r_reg_req()->::GNET::MG2R_REG_REQ::MergeFrom(from.mg2r_reg_req());
    }
    if (from.has_mr2g_reg_res()) {
      mutable_mr2g_reg_res()->::GNET::MR2G_REG_RES::MergeFrom(from.mr2g_reg_res());
    }
    if (from.has_mg2r_sync_req()) {
      mutable_mg2r_sync_req()->::GNET::MG2R_SYNC_REQ::MergeFrom(from.mg2r_sync_req());
    }
    if (from.has_mr2g_sync_res()) {
      mutable_mr2g_sync_res()->::GNET::MR2G_SYNC_RES::MergeFrom(from.mr2g_sync_res());
    }
    if (from.has_mr2g_sync_req()) {
      mutable_mr2g_sync_req()->::GNET::MR2G_SYNC_REQ::MergeFrom(from.mr2g_sync_req());
    }
    if (from.has_mg2r_sync_res()) {
      mutable_mg2r_sync_res()->::GNET::MG2R_SYNC_RES::MergeFrom(from.mg2r_sync_res());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MG2R::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MG2R::CopyFrom(const MG2R& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MG2R::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_mg2r_reg_req()) {
    if (!this->mg2r_reg_req().IsInitialized()) return false;
  }
  if (has_mr2g_reg_res()) {
    if (!this->mr2g_reg_res().IsInitialized()) return false;
  }
  if (has_mg2r_sync_req()) {
    if (!this->mg2r_sync_req().IsInitialized()) return false;
  }
  if (has_mr2g_sync_res()) {
    if (!this->mr2g_sync_res().IsInitialized()) return false;
  }
  if (has_mr2g_sync_req()) {
    if (!this->mr2g_sync_req().IsInitialized()) return false;
  }
  if (has_mg2r_sync_res()) {
    if (!this->mg2r_sync_res().IsInitialized()) return false;
  }
  return true;
}

void MG2R::Swap(MG2R* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(mg2r_reg_req_, other->mg2r_reg_req_);
    std::swap(mr2g_reg_res_, other->mr2g_reg_res_);
    std::swap(mg2r_sync_req_, other->mg2r_sync_req_);
    std::swap(mr2g_sync_res_, other->mr2g_sync_res_);
    std::swap(mr2g_sync_req_, other->mr2g_sync_req_);
    std::swap(mg2r_sync_res_, other->mg2r_sync_res_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MG2R::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MG2R_descriptor_;
  metadata.reflection = MG2R_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace GNET

// @@protoc_insertion_point(global_scope)
