// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: comm.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "comm.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace GNET {

namespace {

const ::google::protobuf::Descriptor* MSyncOp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MSyncOp_reflection_ = NULL;
const ::google::protobuf::Descriptor* MSync_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MSync_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_comm_2eproto() {
  protobuf_AddDesc_comm_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "comm.proto");
  GOOGLE_CHECK(file != NULL);
  MSyncOp_descriptor_ = file->message_type(0);
  static const int MSyncOp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSyncOp, add_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSyncOp, del_),
  };
  MSyncOp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MSyncOp_descriptor_,
      MSyncOp::default_instance_,
      MSyncOp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSyncOp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSyncOp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MSyncOp));
  MSync_descriptor_ = file->message_type(1);
  static const int MSync_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSync, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSync, op_),
  };
  MSync_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MSync_descriptor_,
      MSync::default_instance_,
      MSync_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSync, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSync, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MSync));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_comm_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MSyncOp_descriptor_, &MSyncOp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MSync_descriptor_, &MSync::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_comm_2eproto() {
  delete MSyncOp::default_instance_;
  delete MSyncOp_reflection_;
  delete MSync::default_instance_;
  delete MSync_reflection_;
}

void protobuf_AddDesc_comm_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\ncomm.proto\022\004GNET\"#\n\007MSyncOp\022\013\n\003add\030\001 \001"
    "(\005\022\013\n\003del\030\002 \001(\005\".\n\005MSync\022\n\n\002id\030\001 \002(\003\022\031\n\002"
    "op\030\002 \002(\0132\r.GNET.MSyncOp", 103);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "comm.proto", &protobuf_RegisterTypes);
  MSyncOp::default_instance_ = new MSyncOp();
  MSync::default_instance_ = new MSync();
  MSyncOp::default_instance_->InitAsDefaultInstance();
  MSync::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_comm_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_comm_2eproto {
  StaticDescriptorInitializer_comm_2eproto() {
    protobuf_AddDesc_comm_2eproto();
  }
} static_descriptor_initializer_comm_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int MSyncOp::kAddFieldNumber;
const int MSyncOp::kDelFieldNumber;
#endif  // !_MSC_VER

MSyncOp::MSyncOp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MSyncOp::InitAsDefaultInstance() {
}

MSyncOp::MSyncOp(const MSyncOp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MSyncOp::SharedCtor() {
  _cached_size_ = 0;
  add_ = 0;
  del_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MSyncOp::~MSyncOp() {
  SharedDtor();
}

void MSyncOp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MSyncOp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MSyncOp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MSyncOp_descriptor_;
}

const MSyncOp& MSyncOp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_comm_2eproto();
  return *default_instance_;
}

MSyncOp* MSyncOp::default_instance_ = NULL;

MSyncOp* MSyncOp::New() const {
  return new MSyncOp;
}

void MSyncOp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    add_ = 0;
    del_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MSyncOp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 add = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &add_)));
          set_has_add();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_del;
        break;
      }

      // optional int32 del = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_del:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &del_)));
          set_has_del();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MSyncOp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 add = 1;
  if (has_add()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->add(), output);
  }

  // optional int32 del = 2;
  if (has_del()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->del(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MSyncOp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 add = 1;
  if (has_add()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->add(), target);
  }

  // optional int32 del = 2;
  if (has_del()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->del(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MSyncOp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 add = 1;
    if (has_add()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->add());
    }

    // optional int32 del = 2;
    if (has_del()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->del());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MSyncOp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MSyncOp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MSyncOp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MSyncOp::MergeFrom(const MSyncOp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_add()) {
      set_add(from.add());
    }
    if (from.has_del()) {
      set_del(from.del());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MSyncOp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSyncOp::CopyFrom(const MSyncOp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSyncOp::IsInitialized() const {

  return true;
}

void MSyncOp::Swap(MSyncOp* other) {
  if (other != this) {
    std::swap(add_, other->add_);
    std::swap(del_, other->del_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MSyncOp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MSyncOp_descriptor_;
  metadata.reflection = MSyncOp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MSync::kIdFieldNumber;
const int MSync::kOpFieldNumber;
#endif  // !_MSC_VER

MSync::MSync()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MSync::InitAsDefaultInstance() {
  op_ = const_cast< ::GNET::MSyncOp*>(&::GNET::MSyncOp::default_instance());
}

MSync::MSync(const MSync& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MSync::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  op_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MSync::~MSync() {
  SharedDtor();
}

void MSync::SharedDtor() {
  if (this != default_instance_) {
    delete op_;
  }
}

void MSync::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MSync::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MSync_descriptor_;
}

const MSync& MSync::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_comm_2eproto();
  return *default_instance_;
}

MSync* MSync::default_instance_ = NULL;

MSync* MSync::New() const {
  return new MSync;
}

void MSync::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    if (has_op()) {
      if (op_ != NULL) op_->::GNET::MSyncOp::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MSync::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_op;
        break;
      }

      // required .GNET.MSyncOp op = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_op:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_op()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MSync::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // required .GNET.MSyncOp op = 2;
  if (has_op()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->op(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MSync::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // required .GNET.MSyncOp op = 2;
  if (has_op()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->op(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MSync::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // required .GNET.MSyncOp op = 2;
    if (has_op()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->op());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MSync::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MSync* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MSync*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MSync::MergeFrom(const MSync& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_op()) {
      mutable_op()->::GNET::MSyncOp::MergeFrom(from.op());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MSync::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSync::CopyFrom(const MSync& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSync::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void MSync::Swap(MSync* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(op_, other->op_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MSync::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MSync_descriptor_;
  metadata.reflection = MSync_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace GNET

// @@protoc_insertion_point(global_scope)
